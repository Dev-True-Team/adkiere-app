datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ENUMS
// this are enums to use inside the models (collections)
// they by itself are not a collection
// they are use to define standard values for the same fields in diferent documents
enum PropertyStatus {
  SALE
  RENT
  SOLD
  RENTED
}

enum HouseType {
  HOUSE
  COUNTRY_HOUSE
  BEACH_HOUSE
  VILLA
  CABIN
}

enum propertyType {
  HOUSE
  APARTMENT
  LAND
  WAREHOUSE
  LOCAL
  OFFICE
  BUILDING
}

// TYPES
// this are the types to use inside the models (collections)
// they by itself are not a collection

type metadata {
  createdAt DateTime @default(now())
  updatedAt DateTime
  createdBy String?
  updatedBy String?
  isInTrash Boolean  @default(false)
  isDeleted Boolean  @default(false)
}

type Location {
  country      String
  state        String
  city         String?
  neighborhood String?
  street       String?
  zipCode      String?
  latitude     Float?
  longitude    Float?
}

type Image {
  url String
  key String
}

type Property {
  title                   String?
  propertyType            propertyType?
  description             String?
  price                   Float?
  location                Location?
  propertyStatus          PropertyStatus @default(SALE)
  totalRods               Float?
  totalConstructionRods   Float?
  totalMeters             Float?
  totalConstructionMeters Float?
  images                  Image[]
}

type Housing {
  bedrooms    Int
  bathrooms   Int
  floors      Int
  year        Int?
  remodeled   Int?
  cistern     Boolean
  water       Boolean
  electricity Boolean
  gas         Boolean
  furnished   Boolean
  terrace     Boolean
}

// MODELS
// this are the collections in the database
model House {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  metadata     metadata
  propertyData Property
  housingData  Housing
  garage       Boolean
  pool         Boolean
  garden       Boolean
  houseType    HouseType
}

model Apartment {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  metadata     metadata
  propertyData Property
  housingData  Housing
  laundry      Boolean
  elevator     Boolean
  parking      Boolean
  kitchen      Boolean
  balcony      Boolean
}

model Land {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  metadata     metadata
  propertyData Property
  squareRods   Float
  rodPrice     Float
  potableWater Boolean
  electricity  Boolean
  cable        Boolean
  sewer        Boolean
  metersFront  Float?
  metersBack   Float?
  metersLeft   Float?
  metersRight  Float?
}

model Warehouse {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  metadata     metadata
  propertyData Property
  squareRods   Float
  rodPrice     Float
  height       Float
  potableWater Boolean
  electricity  Boolean
  cable        Boolean
  sewer        Boolean
}

model Local {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  metadata     metadata
  propertyData Property
  height       Float
  bathrooms    Float
  floors       Float
  parking      Boolean
}

model Office {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  metadata     metadata
  propertyData Property
  height       Float
  bathrooms    Float
  floors       Float
  parking      Boolean
  furnished    Boolean
}

model Building {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  metadata     metadata
  propertyData Property
  height       Float
  bathrooms    Float
  floors       Float
  parking      Boolean
  furnished    Boolean
  elevator     Boolean
  laundry      Boolean
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
